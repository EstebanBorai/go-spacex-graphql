// Code generated by go-bindata.
// sources:
// schema/.gitkeep
// schema/schema.graphql
// schema/type/capsule.graphql
// schema/type/mission.graphql
// schema/type/time.graphql
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGitkeep = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func schemaGitkeepBytes() ([]byte, error) {
	return bindataRead(
		_schemaGitkeep,
		"schema/.gitkeep",
	)
}

func schemaGitkeep() (*asset, error) {
	bytes, err := schemaGitkeepBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/.gitkeep", size: 0, mode: os.FileMode(420), modTime: time.Unix(1582581252, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaSchemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\xce\x48\xcd\x4d\x54\xa8\xe6\x52\x50\x28\x2c\x4d\x2d\xaa\xb4\x52\x08\x04\x51\x5c\xb5\x5c\x5c\x25\x95\x05\xa9\x10\x1e\x58\x5a\x59\xc1\x3d\xb1\x24\x23\xb5\x48\x21\x39\xb1\xa0\xb8\x34\x27\xb5\x98\x4b\x01\xc6\xd4\xd0\xb4\x52\x88\x76\x86\xb0\x63\x15\xb9\xb8\x38\xe1\x6a\x73\x33\x8b\x8b\x33\xf3\xf3\x8a\xb9\x38\xa1\x2c\xb0\x52\x5f\x08\x3b\x56\x91\xab\x96\x0b\x10\x00\x00\xff\xff\x86\x76\x8b\x38\x81\x00\x00\x00")

func schemaSchemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaSchemaGraphql,
		"schema/schema.graphql",
	)
}

func schemaSchemaGraphql() (*asset, error) {
	bytes, err := schemaSchemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/schema.graphql", size: 129, mode: os.FileMode(420), modTime: time.Unix(1582583284, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaTypeCapsuleGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcd\x41\xaa\xc2\x40\x0c\xc6\xf1\xf5\xe4\x14\xe9\x35\x66\xdb\x6e\x0a\x7d\x3c\xb0\x75\x25\x2e\x82\x86\x1a\x18\xd3\xd2\x64\xc0\x22\xde\x5d\x90\x5a\x06\xdc\x7d\xfc\x48\xf8\xfb\x3a\x33\xd6\x34\x5b\x4e\x8c\x4f\x08\xdb\xec\x79\x11\x4a\x11\x7b\x5f\x44\xc7\x6a\xf7\xb6\x29\xac\x77\xf2\x6c\x05\xfc\x2f\x32\x8a\x52\xea\x28\xeb\xe5\x16\x71\x90\x3b\xff\xf0\x51\xe5\x11\xb1\x55\xaf\x20\xfc\x89\x99\x4c\x6a\x11\x4f\xdb\x3c\x57\x10\x3a\xd2\xab\xe8\x68\xdf\xab\x61\x9d\xb9\xa8\x34\xec\x24\x69\xef\x42\x38\x70\x36\xae\xa7\xac\xfe\xf9\x80\x17\xbc\x03\x00\x00\xff\xff\xe4\x76\x86\xf2\xd6\x00\x00\x00")

func schemaTypeCapsuleGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaTypeCapsuleGraphql,
		"schema/type/capsule.graphql",
	)
}

func schemaTypeCapsuleGraphql() (*asset, error) {
	bytes, err := schemaTypeCapsuleGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/type/capsule.graphql", size: 214, mode: os.FileMode(420), modTime: time.Unix(1582583289, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaTypeMissionGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\xf0\xcd\x2c\x2e\xce\xcc\xcf\x53\xa8\xe6\xe2\x84\x32\xfd\x12\x73\x53\xad\x14\x82\x4b\x8a\x32\xf3\xd2\x15\xe1\xa2\x9e\x2e\xc8\x62\x89\x79\xa5\x69\x89\xc9\x25\xa5\x45\xa9\x45\xc5\x56\x0a\xd1\x10\x89\x58\x45\x2e\xce\x80\xc4\xca\x9c\xfc\xc4\x14\x4f\x17\x54\xe1\xf0\xcc\xec\xcc\x82\xd4\x94\xcc\x44\x98\x21\x5c\x9c\xe1\xa9\x49\xc5\x99\x25\xa9\x08\x81\x90\xf2\xcc\x92\x92\xd4\x22\x84\x80\x4b\x6a\x71\x72\x51\x66\x41\x49\x66\x7e\x1e\x5c\xb0\x96\x0b\x10\x00\x00\xff\xff\x41\x7e\x1c\xb4\xb6\x00\x00\x00")

func schemaTypeMissionGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaTypeMissionGraphql,
		"schema/type/mission.graphql",
	)
}

func schemaTypeMissionGraphql() (*asset, error) {
	bytes, err := schemaTypeMissionGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/type/mission.graphql", size: 182, mode: os.FileMode(420), modTime: time.Unix(1582585632, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaTypeTimeGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\x4e\xcc\x49\x2c\x52\x08\xc9\xcc\x4d\xe5\x02\x04\x00\x00\xff\xff\xb0\xe3\xb2\x36\x0c\x00\x00\x00")

func schemaTypeTimeGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaTypeTimeGraphql,
		"schema/type/time.graphql",
	)
}

func schemaTypeTimeGraphql() (*asset, error) {
	bytes, err := schemaTypeTimeGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/type/time.graphql", size: 12, mode: os.FileMode(420), modTime: time.Unix(1582583263, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema/.gitkeep": schemaGitkeep,
	"schema/schema.graphql": schemaSchemaGraphql,
	"schema/type/capsule.graphql": schemaTypeCapsuleGraphql,
	"schema/type/mission.graphql": schemaTypeMissionGraphql,
	"schema/type/time.graphql": schemaTypeTimeGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"schema": &bintree{nil, map[string]*bintree{
		".gitkeep": &bintree{schemaGitkeep, map[string]*bintree{}},
		"schema.graphql": &bintree{schemaSchemaGraphql, map[string]*bintree{}},
		"type": &bintree{nil, map[string]*bintree{
			"capsule.graphql": &bintree{schemaTypeCapsuleGraphql, map[string]*bintree{}},
			"mission.graphql": &bintree{schemaTypeMissionGraphql, map[string]*bintree{}},
			"time.graphql": &bintree{schemaTypeTimeGraphql, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

